@inject NavigationManager NavigationManager


<div>
    <h2>Esta es la pagina de Resumen Setup GIA TIC</h2>
    <p>Sector @nuevoCliente.InfoCliente.Sector</p>
    <p>Nombre @nuevoCliente.InfoCliente.Nombre</p>
    <p>Madurez @nuevoCliente.InfoCliente.Madurez</p>
</div>

<PageTitle>Resumen Setup GIA TIC</PageTitle>

<h3>Resumen Setup GIA TIC</h3>
<div class="main">
    <div class="sector">
        <h1>Telecomunicaciones</h1>
        <ul>
            @foreach (List<string> servicio in _serviciosTelco)
            {
                <li>
                    @foreach (string s in servicio)
                    {
                        <p>@s</p>
                    }
                </li>
            }
        </ul>
        <br />
    </div>

    <div class="sector">
        <h1>Bases de Datos</h1>
        <ul>
            @foreach (List<string> servicio in _serviciosBD)
            {
                <li>
                    @foreach (string s in servicio)
                    {
                        <p>@s</p>
                        
                    }
                </li>
            }
        </ul>
        <br />

    </div>
    <div class="sector">
        <h1>Servidores Fisicos</h1>
        <ul>
            @foreach (List<string> servicio in _serviciosServidoresFisicos)
            {
                <li>
                    @foreach (string s in servicio)
                    {
                        <p>@s</p>
                    }
                </li>
            }
        </ul>
        <br />

    </div>
    <div class="sector">
        <h1>Servidores Virtuales</h1>
        <ul>
            @foreach (List<string> servicio in _serviciosServidoresVirtuales)
            {
                <li>
                    @foreach (string s in servicio)
                    {
                        <p>@s</p>
                    }
                </li>
            }
        </ul>
        <br />

    </div>
    <div class="sector">
        <h1>Plataformas Centralizadas</h1>
        <ul>
            @foreach (List<string> servicio in _serviciosPlataformasCentralizadas)
            {
                <li>
                    @foreach (string s in servicio)
                    {
                        <p>@s</p>
                    }
                </li>
            }
        </ul>
        <br />

    </div>


</div>



@code {

    [CascadingParameter]
    public Cliente? nuevoCliente { get; set; }

    [CascadingParameter]
    public ListasSetupTemporales? ListasTemporales { get; set; }

    private string? equiposTelcoDropdown;
    private int cantidadEquiposTelco;
    private string? actualizacionEquiposTelcoDropdown;
    private string? distribucionEquiposTelcoDropdown;
    private string? atencionEquiposTelcoDropdown;


    private string? basesDeDatosDropdown;
    private int cantidadBasesDeDatos;
    private string? actualizacionBasesDeDatosDropdown;
    private string? distribucionBasesDeDatosDropdown;
    private string? atencionBasesDeDatosDropdown;

    private string? servidoresFisicosDropdown;
    private string? servidoresVirtualesDropdown;
    private int cantidadServidoresFisicos;
    private string? actualizacionServidoresFisicosDropdown;
    private string? distribucionServidoresFisicosDropdown;
    private string? atencionServidoresFisicosDropdown;

    private string? actualizacionServidoresVirtualesDropdown;
    private int cantidadServidoresVirtuales;

    private string? centralizadasDropdown;
    private int cantidadCentralizadas;
    private string? actualizacionCentralizadasDropdown;
    private string? distribucionCentralizadasDropdown;
    private string? atencionCentralizadasDropdown;
    private string? contratoCentralizadasDropdown;

    private List<List<string>> _serviciosTelco = new List<List<string>>();
    private List<List<string>> _serviciosBD = new List<List<string>>();
    private List<List<string>> _serviciosServidoresFisicos = new List<List<string>>();
    private List<List<string>> _serviciosServidoresVirtuales = new List<List<string>>();
    private List<List<string>> _serviciosPlataformasCentralizadas = new List<List<string>>();

    private List<List<string>> getServiciosArea(string area)
    {

        switch (area)
        {
            case "Telecomunicaciones":
                List<List<string>> serviciosTelco = new List<List<string>>();
                List<string> nuevoServicio;
                if (ListasTemporales.ListaTICTelecomunicaciones != null)
            {
                foreach (Setup servicio in ListasTemporales.ListaTICTelecomunicaciones)
                {
                    nuevoServicio = new List<string>();
                    nuevoServicio.Add("Equipo: " + servicio.TipoEquipo.Nombre);
                    nuevoServicio.Add("Cantidad: " + servicio.Cantidad);
                    nuevoServicio.Add("Actualizacion: " + servicio.Actualizacion.Nombre);
                    nuevoServicio.Add("Distribucion: " + servicio.Distribucion.Nombre);
                    nuevoServicio.Add("Atencion: " + servicio.Atencion.Nombre);
                    nuevoServicio.Add("Costo: " + servicio.Costo);
                    serviciosTelco.Add(nuevoServicio);
                }

            }
                return serviciosTelco;
            case "Bases de Datos":
                List<List<string>> serviciosBD = new List<List<string>>();
                if (ListasTemporales.ListaTICBasesDeDatos != null)
            {
                foreach (Setup servicio in ListasTemporales.ListaTICBasesDeDatos)
                {
                    nuevoServicio = new List<string>();
                    nuevoServicio.Add("Equipo: " + servicio.TipoEquipo.Nombre);
                    nuevoServicio.Add("Cantidad: " + servicio.Cantidad);
                    nuevoServicio.Add("Actualizacion: " + servicio.Actualizacion.Nombre);
                    nuevoServicio.Add("Distribucion: " + servicio.Distribucion.Nombre);
                    nuevoServicio.Add("Atencion: " + servicio.Atencion.Nombre);
                    nuevoServicio.Add("Costo: " + servicio.Costo);
                    serviciosBD.Add(nuevoServicio);
                }

            }
                return serviciosBD;
            case "Servidores Fisicos":
                List<List<string>> serviciosServidoresFisicos = new List<List<string>>();
                if (ListasTemporales.ListaTICServidoresFisicos != null)
            {
                foreach (Setup servicio in ListasTemporales.ListaTICServidoresFisicos)
                {
                    nuevoServicio = new List<string>();
                    nuevoServicio.Add("Equipo: " + servicio.TipoEquipo.Nombre);
                    nuevoServicio.Add("Cantidad: " + servicio.Cantidad);
                    nuevoServicio.Add("Actualizacion: " + servicio.Actualizacion.Nombre);
                    nuevoServicio.Add("Distribucion: " + servicio.Distribucion.Nombre);
                    nuevoServicio.Add("Atencion: " + servicio.Atencion.Nombre);
                    nuevoServicio.Add("Costo: " + servicio.Costo);
                    serviciosServidoresFisicos.Add(nuevoServicio);
                }

            }
                return serviciosServidoresFisicos;
            case "Servidores Virtuales":
                List<List<string>> serviciosServidoresVirtuales = new List<List<string>>();
                if (ListasTemporales.ListaTICServidoresVirtuales != null)
            {
                foreach (Setup servicio in ListasTemporales.ListaTICServidoresVirtuales)
                {
                    nuevoServicio = new List<string>();
                    nuevoServicio.Add("Equipo: " + servicio.TipoEquipo.Nombre);
                    nuevoServicio.Add("Cantidad: " + servicio.Cantidad);
                    nuevoServicio.Add("Actualizacion: " + servicio.Actualizacion.Nombre);
                    nuevoServicio.Add("Costo: " + servicio.Costo);
                    serviciosServidoresVirtuales.Add(nuevoServicio);
                }

            }
                return serviciosServidoresVirtuales;
            case "Plataformas Centralizadas":
                List<List<string>> serviciosPlataformasCentralizadas = new List<List<string>>();
                //TODO: falta todo esto
                if (ListasTemporales.ListaTICPlataformasCentralizadas != null)
            {
                foreach (Setup servicio in ListasTemporales.ListaTICPlataformasCentralizadas)
                {
                    nuevoServicio = new List<string>();
                    nuevoServicio.Add("Equipo: " + servicio.TipoEquipo.Nombre);
                    nuevoServicio.Add("Cantidad: " + servicio.Cantidad);
                    nuevoServicio.Add("Actualizacion: " + servicio.Actualizacion.Nombre);
                    nuevoServicio.Add("Distribucion: " + servicio.Distribucion.Nombre);
                    nuevoServicio.Add("Atencion: " + servicio.Atencion.Nombre);
                    nuevoServicio.Add("Costo: " + servicio.Costo);
                    serviciosPlataformasCentralizadas.Add(nuevoServicio);
                }

            }
                return serviciosPlataformasCentralizadas;
            default:
                Console.WriteLine("Error");
                return new List<List<string>>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _serviciosTelco = getServiciosArea("Telecomunicaciones");
        _serviciosBD = getServiciosArea("Bases de Datos");
        _serviciosServidoresFisicos = getServiciosArea("Servidores Fisicos");
        _serviciosServidoresVirtuales = getServiciosArea("Servidores Virtuales");
        _serviciosPlataformasCentralizadas = getServiciosArea("Plataformas Centralizadas");
    }
}
